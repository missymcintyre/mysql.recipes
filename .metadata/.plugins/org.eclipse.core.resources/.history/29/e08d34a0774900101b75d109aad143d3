package recipes.dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalTime;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import provided.util.DaoBase;
import recipes.Recipes;
import recipes.entity.Category;
import recipes.entity.Ingredient;
import recipes.entity.Recipe;
import recipes.entity.Step;
import recipes.entity.Unit;
import recipes.exception.DbException;

public class RecipeDao extends DaoBase {
	private static final String CATEGORY_TABLE = "category";
	private static final String INGREDIENT_TABLE = "ingredient";
	private static final String RECIPE_TABLE = "recipe";
	private static final String RECIPE_CATEGORY_TABLE = "recipe_category";
	private static final String STEP_TABLE = "step";
	private static final String UNIT_TABLE = "unit";
	private static final Connection conn = null;
	
	private List<Ingredient> fetchRecipeIngredients(Connection conn,
		      Integer recipeId) throws SQLException {
	    // @formatter:off
	    String sql = ""
	        + "SELECT i.*, u.unit_name_singular, u.unit_name_plural "
	        + "FROM " + INGREDIENT_TABLE + " i "
	        + "LEFT JOIN " + UNIT_TABLE + " u USING (unit_id) "
	        + "WHERE i.recipe_id = ? "
	        + "ORDER BY i.ingredient_order";
	    // @formatter:on

	    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
	      setParameter(stmt, 1, recipeId, Integer.class);

	      try (ResultSet rs = stmt.executeQuery()) {
	        List<Ingredient> ingredients = new LinkedList<>();

	        while (rs.next()) {

	          Unit unit = extract(rs, Unit.class);
	          Ingredient ingredient = extract(rs, Ingredient.class);

	          ingredient.setUnit(unit);
	          ingredients.add(ingredient);
	        }

	        return ingredients;
	      
	    }
	  }
	}
	 private List<Step> fetchRecipeSteps(Connection conn, Integer recipeId)
		      throws SQLException {
		    String sql = "SELECT * FROM " + STEP_TABLE + " s WHERE s.recipe_id = ? "
		        + "ORDER BY s.step_order";

		    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
		      setParameter(stmt, 1, recipeId, Integer.class);

		      try (ResultSet rs = stmt.executeQuery()) {
		        List<Step> steps = new LinkedList<>();

		        while (rs.next()) {
		          /*
		           * If the convenience method, extract, is not used, you would need to
		           * load all the columns into a Step object manually by pulling them
		           * from the result set.
		           */
		          steps.add(extract(rs, Step.class));
		        }

		        return steps;
		      }
		    }
		  }

		  public List<Step> fetchRecipeSteps(Integer recipeId) {
		    try (Connection conn = DbConnection.getConnection()) {
		      startTransaction(conn);

		      try {
		        List<Step> steps = fetchRecipeSteps(conn, recipeId);
		        commitTransaction(conn);

		        return steps;
		      } catch (Exception e) {
		        rollbackTransaction(conn);
		        throw new DbException(e);
		      }
		    } catch (SQLException e) {
		      throw new DbException(e);
		    }
		  }
		  private List<Category> fetchRecipeCategories(Connection conn,
			      Integer recipeId) throws SQLException {
			    // @formatter:off
			    String sql = ""
			        + "SELECT c.category_id, c.category_name "
			        + "FROM " + RECIPE_CATEGORY_TABLE + " rc "
			        + "JOIN " + CATEGORY_TABLE + " c USING (category_id) "
			        + "WHERE rc.recipe_id = ?";
			    // @formatter:on

			    try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			      setParameter(stmt, 1, recipeId, Integer.class);

			      try (ResultSet rs = stmt.executeQuery()) {
			        List<Category> categories = new LinkedList<>();

			        while (rs.next()) {
			          /*
			           * If the convenience method, extract, isn't used, you would need to
			           * create the Category objects and load them from the result set
			           * manually.
			           */
			          categories.add(extract(rs, Category.class));
			        }

			        return categories;
			      }
			    }
			  }
		  public List<Recipe> fetchAllRecipes() {
			    String sql = "SELECT * FROM " + RECIPE_TABLE + " ORDER BY recipe_name";

			    try (Connection conn = DbConnection.getConnection()) {
			      startTransaction(conn);

			      try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			        try (ResultSet rs = stmt.executeQuery()) {
			          List<Recipe> recipes = new LinkedList<>();

			          while (rs.next()) {
			            /*
			             * If the convenience method, extract, is not used, you would need
			             * to manually create the Recipe objects and populate them from the
			             * result set.
			             */
			            recipes.add(extract(rs, Recipe.class));
			          }

			          return recipes;
			        }
			      } catch (Exception e) {
			        rollbackTransaction(conn);
			        throw new DbException(e);
			      }
			    } catch (SQLException e) {
			      throw new DbException(e);
			    }
			  }
		  public Recipe insertRecipe(Recipe recipe) {
			    /*
			     * Note that the primary key (recipe_id) is not included in the list of
			     * fields in the insert statement. MySQL will set the correct primary key
			     * value when the row is inserted.
			     */
			    // @formatter:off
			    String sql = ""
			        + "INSERT INTO " + RECIPE_TABLE + " "
			        + "(recipe_name, notes, num_servings, prep_time, cook_time) "
			        + "VALUES "
			        + "(?, ?, ?, ?, ?)";
			    // @formatter:on

			    try (Connection conn = DbConnection.getConnection()) {
			      startTransaction(conn);

			      try (PreparedStatement stmt = conn.prepareStatement(sql)) {
			        setParameter(stmt, 1, recipe.getRecipeName(), String.class);
			        setParameter(stmt, 2, recipe.getNotes(), String.class);
			        setParameter(stmt, 3, recipe.getNumServings(), Integer.class);
			        setParameter(stmt, 4, recipe.getPrepTime(), LocalTime.class);
			        setParameter(stmt, 5, recipe.getCookTime(), LocalTime.class);

			        /*
			         * Insert the row. Statement.executeUpdate() performs inserts,
			         * deletions, and modifications. It does all operations that do not
			         * return result sets.
			         */
			        stmt.executeUpdate();

			        /*
			         * Call a method in the base class to get the last insert ID (primary
			         * key value) in the given table.
			         */
			        Integer recipeId = getLastInsertId(conn, RECIPE_TABLE);

			        commitTransaction(conn);

			        /*
			         * Set the recipe ID primary key to the value obtained by
			         * getLastInsertId(). This does not fill in the createdAt field. To get
			         * that value we would need to do a fetch on the recipe row.
			         */
			        recipe.setRecipeId(recipeId);
			        return recipe;
			      } catch (Exception e) {
			        rollbackTransaction(conn);
			        throw new DbException(e);
			      }
			    } catch (SQLException e) {
			      throw new DbException(e);
			    }
			  }
		  public void executeBatch(List<String> sqlBatch) {
			    try (Connection conn = DbConnection.getConnection()) {
			      startTransaction(conn);

			      try (Statement stmt = conn.createStatement()) {
			        /*
			         * Add each SQL line to the Statement so they can be executed as a
			         * batch.
			         */
			        for (String sql : sqlBatch) {
			          stmt.addBatch(sql);
			        }

			        stmt.executeBatch();
			        commitTransaction(conn);

			      } catch (Exception e) {
			        rollbackTransaction(conn);
			        throw new DbException(e);
			      }
			    } catch (SQLException e) {
			      throw new DbException(e);
			    }
			  }


	public Optional <Recipe> fetchRecipeById(Integer recipeId){
		String sql = "SELECT * FROM " + RECIPE_TABLE + " Where recipe_id = ?";
		try(Connection  conn = DbConnection.getConnection()) {
			startTransaction(conn);
			
		    try {
		    	Recipe recipe = null;
		    	
		    	try(PreparedStatement stmt = conn.prepareStatement(sql)) {
		    		setParameter(stmt, 1, recipeId, Integer.class);
		    		
		    		try(ResultSet rs = stmt.executeQuery()) {
		    			if(rs.next()) {
		    				recipe = extract(rs, Recipe.class);
		    				
		    			}
		    		}
		    		
		    	}
		    	 if (Objects.nonNull(recipe)) {
		             /*
		              * Ingredients, steps, and categories are fetched under the current
		              * transaction.
		              */
		             recipe.getIngredients()
		                 .addAll(fetchRecipeIngredients(conn, recipeId));

		             recipe.getSteps().addAll(fetchRecipeSteps(conn, recipeId));
		             recipe.getCategories().addAll(fetchRecipeCategories(conn, recipeId));
		           }

		           commitTransaction(conn);
  
//		  return Optional.ofNullable(recipe); 
//		    }
		    catch(Exception e) {
		    	rollbackTransaction(conn);
		    	throw new DbException(e);
		    }
		}
	catch (SQLException e) {
		throw new DbException(e);
	}
	}
	private List<Category> fetchRecipeCategories(Connection conn, Integer recipeId) throws SQLException {
			
			// @formatter:off
			String sql = ""
			+ "SELECT c.* "
			+ "FROM " + RECIPE_CATEGORY_TABLE + " rs "
			+ "JOIN " + CATEGORY_TABLE + " c USING (category_id) "
			+ "WHERE recipe_id = ? "
			+ "ORDER BY c.category_name";
			// @formatter:on
	try(PreparedStatement stmt = conn.prepareStatement(sql)) {
		setParameter(stmt, 1, recipeId, Integer.class);
				
		try(ResultSet rs = stmt.executeQuery()) {	
			List<Category> categories = new LinkedList<Category>();
			
			while(rs.next()) {
				categories.add(extract(rs, Category.class));
			}				
			
			return categories;
		}
		}
	}
		
	private List<Step> fetchRecipeSteps(Connection conn, Integer recipeId) throws SQLException {
		String sql = "SELECT * FROM " + STEP_TABLE + " s WHERE s.recipe_id = ?";
		
		try(PreparedStatement stmt = conn.prepareStatement(sql)) {
			setParameter(stmt, 1, recipeId, Integer.class);
			
			try(ResultSet rs = stmt.executeQuery()) {
				List<Step> steps = new LinkedList<Step>();
				
				while(rs.next()) {
					steps.add(extract(rs, Step.class));	
				}
			return steps;	
			}
		}
	}
	
	private List<Ingredient> fetchRecipeIngredients(Connection conn, Integer recipeId) throws SQLException {
	// @formatter off
	String sql = ""
			+ "SELECT i.* , u.unit_name_singular, u.unit_name_plural "
			+ "FROM " + INGREDIENT_TABLE + " i "
			+ "LEFT JOIN " + UNIT_TABLE + " u USING (unit_id) "
			+ "WHERE recipe_id = ? "
			+ "ORDER BY i.ingredient_order";
	//	@formatter on
			
	 try (PreparedStatement stmt = conn.prepareStatement(sql)) {
		 setParameter(stmt, 1, recipeId, Integer.class);
		 
		 try(ResultSet rs = stmt.executeQuery()) {
			 List<Ingredient> ingredients = new LinkedList<Ingredient>();
		
			 while(rs.next()) {
				 Ingredient ingredient = extract(rs, Ingredient.class);
				 Unit unit = extract(rs, Unit.class);
				 
				 ingredient.setUnit(unit);
				 ingredients.add(ingredient);
			 }
			 
			 
			 return ingredients;
		 }
	 }
	}

	public List<Recipe> fetchAllRecipes() {
		String sql = "SELECT * FROM " + RECIPE_TABLE + " ORDER BY recipe_name"; 
		
		try(Connection conn = DbConnection.getConnection()) {
			startTransaction(conn);
			
			try(PreparedStatement stmt = conn.prepareStatement(sql)) {
				try(ResultSet rs = stmt.executeQuery()) {
					List<Recipe> recipes = new LinkedList<>();
					
					while(rs.next()) {
					recipes.add(extract(rs, Recipe.class));
					}

					return recipes;
				}	
			}
			 catch(Exception e) {
				 rollbackTransaction(conn);
				 throw new DbException(e);
			 }
	} catch(SQLException e) {

			throw new DbException(e);
		}
	
	}

	public Recipe insertRecipe(Recipe recipe) {
		String sql = ""
				+ "INSERT INTO " + RECIPE_TABLE + " "
				+ "(recipe_name, notes, num_servings, prep_time, cook_time) "
				+ "VALUES "
				+ "(?, ?, ?, ?, ?)";
				
		try(Connection conn = DbConnection.getConnection()) {
			startTransaction(conn);
			
			try(PreparedStatement stmt = conn.prepareStatement(sql)) {
				setParameter(stmt, 1, recipe.getRecipeName(), String.class);
				setParameter(stmt, 2, recipe.getNotes(), String.class);
				setParameter(stmt, 3, recipe.getNumServings(), Integer.class);
				setParameter(stmt, 4, recipe.getPrepTime(), LocalTime.class);
				setParameter(stmt, 5, recipe.getCookTime(), LocalTime.class);
				
				stmt.executeUpdate();
				Integer recipeId = getLastInsertId(conn, RECIPE_TABLE);
				
				commitTransaction(conn);
				
				recipe.setRecipeId(recipeId);
				return recipe;
			}
			catch(Exception e) {
				rollbackTransaction(conn);
				throw new DbException(e);
			}
		} catch (SQLException e) {
			throw new DbException(e);
			
			
		}
	}
	

	
	public void executeBatch(List<String> sqlBatch) {
		try(Connection conn = DbConnection.getConnection()){
			startTransaction(conn);
			
		try(Statement stmt = conn.createStatement()){
			for(String sql : sqlBatch) {
				stmt.addBatch(sql);
			}
			stmt.executeBatch();
			commitTransaction(conn);
			
		}
			catch(Exception e) {
				rollbackTransaction(conn);
				throw new DbException(e);
			}
		}
			catch (SQLException e) {
				throw new DbException(e);
			}

	}
	public List<Unit> fetchAllUnits() throws SQLException {
		String sql = "SELECT * FROM " + UNIT_TABLE + " ORDER BY unit_name_singular ";
		
		try(Connection conn = DbConnection.getConnection()) {
			startTransaction(conn);
		}
			try(PreparedStatement stmt = conn.prepareStatement(sql)) {
				try(ResultSet rs = stmt.executeQuery()) {
				  List<Unit> units = new LinkedList<>();
				  
				  while(rs.next()) {
					  units.add(extract(rs, Unit.class));
				  }
				  
				  return units;
			}
		catch(Exception e) {
			rollbackTransaction(conn);
			throw new DbException(e);
		}
		} catch (SQLException e) {
			throw new DbException(e);
		}
	}
	

	public void addIngredientToRecipe(Ingredient ingredient) {
		String sql = "INSERT INTO " + INGREDIENT_TABLE
				+ " (recipe_id, unit_id,  ingredient_name, instruction, ingredient_order, amount"
				+ "values (?, ?, ?, ?, ?, ?)";
		
		try(Connection conn = DbConnection.getConnection()) {
			startTransaction(conn);
			
			try {
				Integer order = getNextSequenceNumber(conn, ingredient.getRecipeId(), 
						INGREDIENT_TABLE, "recipe_id");
			
				try(PreparedStatement stmt = conn.prepareStatement(sql)) {
					setParameter(stmt, 1, ingredient.getRecipeId(), Integer.class);
					setParameter(stmt, 2, ingredient.getUnit().getUnitId(), Integer.class);
					setParameter(stmt, 3, ingredient.getIngredientName(), String.class);
					setParameter(stmt, 4, ingredient.getInstruction(), String.class);
					setParameter(stmt, 5, order, Integer.class);
					setParameter(stmt, 6, ingredient.getAmount(), BigDecimal.class);
					
					stmt.executeUpdate();
					commitTransaction(conn);
				}
			
			}
			catch(Exception e) {
				rollbackTransaction(conn);
				throw new DbException(e);
			}
			} catch (SQLException e) {
				throw new DbException(e);
				
	}
	}
	public void addStepToRecipe(Step step) {
		String sql = "INSERT INTO " + STEP_TABLE + " (recipe_id, step_order, step_text)"
		+ "VALUES (?, ?, ?)";
		
		try(Connection conn = DbConnection.getConnection()) {
			startTransaction(conn);	
			
			Integer order = getNextSequenceNumber(conn, step.getRecipeId(), 
						STEP_TABLE, "recipe_id");
				try(PreparedStatement stmt = conn.prepareStatement(sql)) {
					setParameter(stmt, 1, step.getRecipeId(), Integer.class);
					setParameter(stmt, 2, order, Integer.class);
					setParameter(stmt, 3, step.getStepText(), String.class);
					
					stmt.executeUpdate();
					commitTransaction(conn);
				}
			
				catch(Exception e) {
					rollbackTransaction(conn);
					throw new DbException(e);
				}
		} catch (SQLException e) {
			throw new DbException(e);
		}
		}	
}

	

